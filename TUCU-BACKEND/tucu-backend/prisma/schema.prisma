// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PLACES {
  idPLACES Int    @id @default(autoincrement())
  city     String
  province String
  country  String

  STORES      STORES[]
  DELIVERYMEN DELIVERYMEN[]
}

model ROLES {
  idROLES          Int     @id
  roleName         Int
  description_role String?
  USERS            USERS[]
}

model STORES {
  idStores         Int          @id @default(autoincrement())
  name             String
  nit              Int
  telephone_number String
  id_place_fk      Int
  addresses        ADDRESSES[] // Eliminé la anotación de relación
  PLACES           PLACES       @relation(fields: [id_place_fk], references: [idPLACES])
  USERS            USERS[]
  DELIVERIES       DELIVERIES[]
}

model USERS {
  idUSERS      Int          @id
  username     String
  firstname    String
  password     String
  surname      String
  enabled      Int
  email        String
  timestamp    DateTime     @default(now())
  id_stores_fk Int
  id_roles_fk  Int
  STORES       STORES       @relation(fields: [id_stores_fk], references: [idStores])
  ROLES        ROLES        @relation(fields: [id_roles_fk], references: [idROLES])
  DELIVERIES   DELIVERIES[]

  @@map("users")
}

model DELIVERYMEN {
  idDELIVERYMEN                   Int          @id
  surname                         String
  enabled                         Int
  email                           String
  drivers_license                 Boolean
  soat                            String
  tm_and_g_inspection_certificate Boolean
  timestamp                       DateTime
  addresses                       ADDRESSES[] // Eliminé la anotación de relación
  id_placess_fk                   Int
  PLACES                          PLACES       @relation(fields: [id_placess_fk], references: [idPLACES])
  DELIVERIES                      DELIVERIES[]
}

model DELIVERIES {
  idDELIVERIES      Int         @id
  timestamp         String
  preparation_time  String
  state             Int
  id_users_fk       Int
  id_stores_fk      Int
  id_deliverymen_fk Int
  addresses         ADDRESSES[] // Eliminé la anotación de relación
  USERS             USERS       @relation(fields: [id_users_fk], references: [idUSERS])
  STORES            STORES      @relation(fields: [id_stores_fk], references: [idStores])
  DELIVERYMEN       DELIVERYMEN @relation(fields: [id_deliverymen_fk], references: [idDELIVERYMEN])
  HISTORIES         HISTORIES[]
}

model HISTORIES {
  idHISTORIES   Int        @id @default(autoincrement())
  action        String
  modified_at   String
  id_delivey_fk Int
  DELIVERIES    DELIVERIES @relation(fields: [id_delivey_fk], references: [idDELIVERIES])
}

model COUNTRIES {
  idCOUNTRIES Int      @id @default(autoincrement())
  name        String
  states      STATES[]
}

model STATES {
  idSTATES   Int       @id @default(autoincrement())
  name       String
  id_country Int
  COUNTRIES  COUNTRIES @relation(fields: [id_country], references: [idCOUNTRIES])
  cities     CITIES[]
}

model CITIES {
  idCITIES  Int         @id @default(autoincrement())
  name      String
  id_state  Int
  STATES    STATES      @relation(fields: [id_state], references: [idSTATES])
  addresses ADDRESSES[]
}

model ADDRESSES {
  idADDRESSES Int           @id @default(autoincrement())
  street      String
  city        CITIES        @relation(fields: [cityId], references: [idCITIES])
  cityId      Int
  stores      STORES[] // Eliminé la anotación de relación
  deliverymen DELIVERYMEN[] // Eliminé la anotación de relación
  deliveries  DELIVERIES[] // Eliminé la anotación de relación
}
